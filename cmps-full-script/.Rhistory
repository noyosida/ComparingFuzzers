af <- path$AF
ag <- path$AG
ff <- path$FF
path <- cbind(a1, a2)
path <- cbind(path, a3)
path <- cbind(path, a4)
path <- cbind(path, a5)
path <- cbind(path, af)
path <- cbind(path, ag)
path <- cbind(path, ff)
h1_group <- rep(1:8, c(12, 12, 12, 12, 12, 12, 12, 12))
Steel.Dwass(as.vector(path), h1_group)
#branch coverage
cov <- read.delim("branch_coverage.txt", header = TRUE)
a1 <- cov$A1
a2 <- cov$A2
a3 <- cov$A3
a4 <- cov$A4
a5 <- cov$A5
af <- cov$AF
ag <- cov$AG
ff <- cov$FF
cov <- cbind(a1, a2)
cov <- cbind(cov, a3)
cov <- cbind(cov, a4)
cov <- cbind(cov, a5)
cov <- cbind(cov, af)
cov <- cbind(cov, ag)
cov <- cbind(cov, ff)
h1_group <- rep(1:8, c(12, 12, 12, 12, 12, 12, 12, 12))
Steel.Dwass(as.vector(cov), h1_group)
#Steel.Dwass?֐??́C?ȉ??̃y?[?W?Ɍ??J?????Ă??????̂𗘗p???܂????D
#http://aoki2.si.gunma-u.ac.jp/R/Steel-Dwass.html
Steel.Dwass <- function(data,group)
{
OK <- complete.cases(data, group)
data <- data[OK]
group <- group[OK]
n.i <- table(group)
ng <- length(n.i)
t <- combn(ng, 2, function(ij) {
i <- ij[1]
j <- ij[2]
r <- rank(c(data[group == i], data[group == j]))
R <- sum(r[1:n.i[i]])
N <- n.i[i]+n.i[j]
E <- n.i[i]*(N+1)/2
V <- n.i[i]*n.i[j]/(N*(N-1))*(sum(r^2)-N*(N+1)^2/4)
return(abs(R-E)/sqrt(V))
})
p <- ptukey(t*sqrt(2), ng, Inf, lower.tail=FALSE)
result <- cbind(t, p)
rownames(result) <- combn(ng, 2, paste, collapse=":")
return(result)
}
path <- read.delim("path_coverage.txt", header = TRUE)
a1 <- path$A1
a2 <- path$A2
a3 <- path$A3
a4 <- path$A4
a5 <- path$A5
af <- path$AF
ag <- path$AG
ff <- path$FF
path <- cbind(a1, a2)
path <- cbind(path, a3)
path <- cbind(path, a4)
path <- cbind(path, a5)
path <- cbind(path, af)
path <- cbind(path, ag)
path <- cbind(path, ff)
h1_group <- rep(1:8, c(12, 12, 12, 12, 12, 12, 12, 12))
Steel.Dwass(as.vector(path), h1_group)
#branch coverage
cov <- read.delim("branch_coverage.txt", header = TRUE)
a1 <- cov$A1
a2 <- cov$A2
a3 <- cov$A3
a4 <- cov$A4
a5 <- cov$A5
af <- cov$AF
ag <- cov$AG
ff <- cov$FF
cov <- cbind(a1, a2)
cov <- cbind(cov, a3)
cov <- cbind(cov, a4)
cov <- cbind(cov, a5)
cov <- cbind(cov, af)
cov <- cbind(cov, ag)
cov <- cbind(cov, ff)
h1_group <- rep(1:8, c(12, 12, 12, 12, 12, 12, 12, 12))
Steel.Dwass(as.vector(cov), h1_group)
cd
setwd("C:/Users/tuzuki/Documents/cmps-full")
#Steel.Dwass関数は，以下のページに公開されているものを利用しました．
#http://aoki2.si.gunma-u.ac.jp/R/Steel-Dwass.html
Steel.Dwass <- function(data,group)
{
OK <- complete.cases(data, group)
data <- data[OK]
group <- group[OK]
n.i <- table(group)
ng <- length(n.i)
t <- combn(ng, 2, function(ij) {
i <- ij[1]
j <- ij[2]
r <- rank(c(data[group == i], data[group == j]))
R <- sum(r[1:n.i[i]])
N <- n.i[i]+n.i[j]
E <- n.i[i]*(N+1)/2
V <- n.i[i]*n.i[j]/(N*(N-1))*(sum(r^2)-N*(N+1)^2/4)
return(abs(R-E)/sqrt(V))
})
p <- ptukey(t*sqrt(2), ng, Inf, lower.tail=FALSE)
result <- cbind(t, p)
rownames(result) <- combn(ng, 2, paste, collapse=":")
return(result)
}
branch <- read.csv("coverage_for_cmps-full.csv", header = TRUE)
a1 <- branch[branch$fuzzer=="afl-1.94b",]
a2 <- branch[branch$fuzzer=="afl-2.40b",]
a3 <- branch[branch$fuzzer=="afl-2.49b",]
a4 <- branch[branch$fuzzer=="afl-2.51b",]
a5 <- branch[branch$fuzzer=="afl-2.52b",]
ff <- branch[branch$fuzzer=="afl-rb",]
af <- branch[branch$fuzzer=="aflfast",]
ag <- branch[branch$fuzzer=="aflgo",]
branch_6h <- cbind(a1$branches, a2$branches)
branch_6h <- cbind(branch_6h, a3$branches)
branch_6h <- cbind(branch_6h, a4$branches)
branch_6h <- cbind(branch_6h, a5$branches)
branch_6h <- cbind(branch_6h, af$branches)
branch_6h <- cbind(branch_6h, ag$branches)
branch_6h <- cbind(branch_6h, ff$branches)
branch_6h_group <- rep(1:8, c(34, 34, 34, 34, 34, 34, 34, 34))
Steel.Dwass(as.vector(branch_6h), branch_6h_group)
#Steel.Dwass関数は，以下のページに公開されているものを利用しました．
#http://aoki2.si.gunma-u.ac.jp/R/Steel-Dwass.html
Steel.Dwass <- function(data,group)
{
OK <- complete.cases(data, group)
data <- data[OK]
group <- group[OK]
n.i <- table(group)
ng <- length(n.i)
t <- combn(ng, 2, function(ij) {
i <- ij[1]
j <- ij[2]
r <- rank(c(data[group == i], data[group == j]))
R <- sum(r[1:n.i[i]])
N <- n.i[i]+n.i[j]
E <- n.i[i]*(N+1)/2
V <- n.i[i]*n.i[j]/(N*(N-1))*(sum(r^2)-N*(N+1)^2/4)
return(abs(R-E)/sqrt(V))
})
p <- ptukey(t*sqrt(2), ng, Inf, lower.tail=FALSE)
result <- cbind(t, p)
rownames(result) <- combn(ng, 2, paste, collapse=":")
return(result)
}
path <- read.csv("normalized_path_for_cmps-full.csv", header = TRUE)
a1 <- path[path$fuzzer=="afl-1.94b",]
a2 <- path[path$fuzzer=="afl-2.40b",]
a3 <- path[path$fuzzer=="afl-2.49b",]
a4 <- path[path$fuzzer=="afl-2.51b",]
a5 <- path[path$fuzzer=="afl-2.52b",]
ff <- path[path$fuzzer=="afl-rb",]
af <- path[path$fuzzer=="aflfast",]
ag <- path[path$fuzzer=="aflgo",]
h1 <- cbind(a1$paths_1h, a2$paths_1h)
h1 <- cbind(h1, a3$paths_1h)
h1 <- cbind(h1, a4$paths_1h)
h1 <- cbind(h1, a5$paths_1h)
h1 <- cbind(h1, af$paths_1h)
h1 <- cbind(h1, ag$paths_1h)
h1 <- cbind(h1, ff$paths_1h)
h1_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h1), h1_group)
h2 <- cbind(a1$paths_2h, a2$paths_2h)
h2 <- cbind(h2, a3$paths_2h)
h2 <- cbind(h2, a4$paths_2h)
h2 <- cbind(h2, a5$paths_2h)
h2 <- cbind(h2, af$paths_2h)
h2 <- cbind(h2, ag$paths_2h)
h2 <- cbind(h2, ff$paths_2h)
h2_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h2), h2_group)
h3 <- cbind(a1$paths_3h, a2$paths_3h)
h3 <- cbind(h3, a3$paths_3h)
h3 <- cbind(h3, a4$paths_3h)
h3 <- cbind(h3, a5$paths_3h)
h3 <- cbind(h3, af$paths_3h)
h3 <- cbind(h3, ag$paths_3h)
h3 <- cbind(h3, ff$paths_3h)
h3_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h3), h3_group)
h4 <- cbind(a1$paths_4h, a2$paths_4h)
h4 <- cbind(h4, a3$paths_4h)
h4 <- cbind(h4, a4$paths_4h)
h4 <- cbind(h4, a5$paths_4h)
h4 <- cbind(h4, af$paths_4h)
h4 <- cbind(h4, ag$paths_4h)
h4 <- cbind(h4, ff$paths_4h)
h4_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h4), h4_group)
h5 <- cbind(a1$paths_5h, a2$paths_5h)
h5 <- cbind(h5, a3$paths_5h)
h5 <- cbind(h5, a4$paths_5h)
h5 <- cbind(h5, a5$paths_5h)
h5 <- cbind(h5, af$paths_5h)
h5 <- cbind(h5, ag$paths_5h)
h5 <- cbind(h5, ff$paths_5h)
h5_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h5), h5_group)
h6 <- cbind(a1$paths_6h, a2$paths_6h)
h6 <- cbind(h6, a3$paths_6h)
h6 <- cbind(h6, a4$paths_6h)
h6 <- cbind(h6, a5$paths_6h)
h6 <- cbind(h6, af$paths_6h)
h6 <- cbind(h6, ag$paths_6h)
h6 <- cbind(h6, ff$paths_6h)
h6_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h6), h6_group)
#Steel.Dwass関数は，以下のページに公開されているものを利用しました．
#http://aoki2.si.gunma-u.ac.jp/R/Steel-Dwass.html
Steel.Dwass <- function(data,group)
{
OK <- complete.cases(data, group)
data <- data[OK]
group <- group[OK]
n.i <- table(group)
ng <- length(n.i)
t <- combn(ng, 2, function(ij) {
i <- ij[1]
j <- ij[2]
r <- rank(c(data[group == i], data[group == j]))
R <- sum(r[1:n.i[i]])
N <- n.i[i]+n.i[j]
E <- n.i[i]*(N+1)/2
V <- n.i[i]*n.i[j]/(N*(N-1))*(sum(r^2)-N*(N+1)^2/4)
return(abs(R-E)/sqrt(V))
})
p <- ptukey(t*sqrt(2), ng, Inf, lower.tail=FALSE)
result <- cbind(t, p)
rownames(result) <- combn(ng, 2, paste, collapse=":")
return(result)
}
branch <- read.csv("coverage_for_cmps-full.csv", header = TRUE)
a1 <- branch[branch$fuzzer=="afl-1.94b",]
a2 <- branch[branch$fuzzer=="afl-2.40b",]
a3 <- branch[branch$fuzzer=="afl-2.49b",]
a4 <- branch[branch$fuzzer=="afl-2.51b",]
a5 <- branch[branch$fuzzer=="afl-2.52b",]
ff <- branch[branch$fuzzer=="afl-rb",]
af <- branch[branch$fuzzer=="aflfast",]
ag <- branch[branch$fuzzer=="aflgo",]
branch_6h <- cbind(a1$branches, a2$branches)
branch_6h <- cbind(branch_6h, a3$branches)
branch_6h <- cbind(branch_6h, a4$branches)
branch_6h <- cbind(branch_6h, a5$branches)
branch_6h <- cbind(branch_6h, af$branches)
branch_6h <- cbind(branch_6h, ag$branches)
branch_6h <- cbind(branch_6h, ff$branches)
branch_6h_group <- rep(1:8, c(34, 34, 34, 34, 34, 34, 34, 34))
Steel.Dwass(as.vector(branch_6h), branch_6h_group)
branch <- read.csv("coverage_for_cmps-full.csv", header = TRUE)
target_branch <- branch[branch$program=="cxxfilt" | branch$program=="nm" | branch$program=="objdump" | branch$program=="readelf" , ]
valid <- target_branch[target_branch$seed=="valid",]
invalid <- target_branch[target_branch$seed=="invalid",]
data <- cbind(valid$branches, invalid$branches)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
path <- read.csv("path_for_cmps-full.csv", header = TRUE)
target_path <- path[path$program=="cxxfilt" | path$program=="nm" | path$program=="objdump" | path$program=="readelf", ]
valid <- target_path[target_path$seed=="valid",]
invalid <- target_path[target_path$seed=="invalid",]
data <- cbind(valid$paths_1h, invalid$paths_1h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_2h, invalid$paths_2h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_3h, invalid$paths_3h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_4h, invalid$paths_4h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_5h, invalid$paths_5h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_6h, invalid$paths_6h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
target_path <- path[path$program=="cxxfilt" | path$program=="nm" | path$program=="objdump" , ]
valid <- target_path[target_path$seed=="valid",]
invalid <- target_path[target_path$seed=="invalid",]
data <- cbind(valid$paths_6h, invalid$paths_6h)
data_group <- rep(1:2, c(72, 72))
Steel.Dwass(as.vector(data), data_group)
path <- read.csv("normalized_path_for_cmps-full.csv", header = TRUE)
target_path <- path[path$program=="cxxfilt" | path$program=="nm" | path$program=="objdump" | path$program=="readelf", ]
valid <- target_path[target_path$seed=="valid",]
invalid <- target_path[target_path$seed=="invalid",]
data <- cbind(valid$paths_1h, invalid$paths_1h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_2h, invalid$paths_2h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_3h, invalid$paths_3h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_4h, invalid$paths_4h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_5h, invalid$paths_5h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_6h, invalid$paths_6h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
path <- read.csv("path_for_cmps-full.csv", header = TRUE)
target_path <- path[path$program=="cxxfilt" | path$program=="nm" | path$program=="objdump" | path$program=="readelf", ]
valid <- target_path[target_path$seed=="valid",]
invalid <- target_path[target_path$seed=="invalid",]
data <- cbind(valid$paths_1h, invalid$paths_1h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_2h, invalid$paths_2h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_3h, invalid$paths_3h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_4h, invalid$paths_4h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_5h, invalid$paths_5h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
data <- cbind(valid$paths_6h, invalid$paths_6h)
data_group <- rep(1:2, c(96, 96))
Steel.Dwass(as.vector(data), data_group)
invalid
valid
View(valid)
#Steel.Dwass関数は，以下のページに公開されているものを利用しました．
#http://aoki2.si.gunma-u.ac.jp/R/Steel-Dwass.html
Steel.Dwass <- function(data,group)
{
OK <- complete.cases(data, group)
data <- data[OK]
group <- group[OK]
n.i <- table(group)
ng <- length(n.i)
t <- combn(ng, 2, function(ij) {
i <- ij[1]
j <- ij[2]
r <- rank(c(data[group == i], data[group == j]))
R <- sum(r[1:n.i[i]])
N <- n.i[i]+n.i[j]
E <- n.i[i]*(N+1)/2
V <- n.i[i]*n.i[j]/(N*(N-1))*(sum(r^2)-N*(N+1)^2/4)
return(abs(R-E)/sqrt(V))
})
p <- ptukey(t*sqrt(2), ng, Inf, lower.tail=FALSE)
result <- cbind(t, p)
rownames(result) <- combn(ng, 2, paste, collapse=":")
return(result)
}
path <- read.csv("normalized_path_for_cmps-full.csv", header = TRUE)
a1 <- path[path$fuzzer=="afl-1.94b",]
a2 <- path[path$fuzzer=="afl-2.40b",]
a3 <- path[path$fuzzer=="afl-2.49b",]
a4 <- path[path$fuzzer=="afl-2.51b",]
a5 <- path[path$fuzzer=="afl-2.52b",]
ff <- path[path$fuzzer=="afl-rb",]
af <- path[path$fuzzer=="aflfast",]
ag <- path[path$fuzzer=="aflgo",]
h1 <- cbind(a1$paths_1h, a2$paths_1h)
h1 <- cbind(h1, a3$paths_1h)
h1 <- cbind(h1, a4$paths_1h)
h1 <- cbind(h1, a5$paths_1h)
h1 <- cbind(h1, af$paths_1h)
h1 <- cbind(h1, ag$paths_1h)
h1 <- cbind(h1, ff$paths_1h)
h1_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h1), h1_group)
h2 <- cbind(a1$paths_2h, a2$paths_2h)
h2 <- cbind(h2, a3$paths_2h)
h2 <- cbind(h2, a4$paths_2h)
h2 <- cbind(h2, a5$paths_2h)
h2 <- cbind(h2, af$paths_2h)
h2 <- cbind(h2, ag$paths_2h)
h2 <- cbind(h2, ff$paths_2h)
h2_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h2), h2_group)
h3 <- cbind(a1$paths_3h, a2$paths_3h)
h3 <- cbind(h3, a3$paths_3h)
h3 <- cbind(h3, a4$paths_3h)
h3 <- cbind(h3, a5$paths_3h)
h3 <- cbind(h3, af$paths_3h)
h3 <- cbind(h3, ag$paths_3h)
h3 <- cbind(h3, ff$paths_3h)
h3_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h3), h3_group)
h4 <- cbind(a1$paths_4h, a2$paths_4h)
h4 <- cbind(h4, a3$paths_4h)
h4 <- cbind(h4, a4$paths_4h)
h4 <- cbind(h4, a5$paths_4h)
h4 <- cbind(h4, af$paths_4h)
h4 <- cbind(h4, ag$paths_4h)
h4 <- cbind(h4, ff$paths_4h)
h4_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h4), h4_group)
h5 <- cbind(a1$paths_5h, a2$paths_5h)
h5 <- cbind(h5, a3$paths_5h)
h5 <- cbind(h5, a4$paths_5h)
h5 <- cbind(h5, a5$paths_5h)
h5 <- cbind(h5, af$paths_5h)
h5 <- cbind(h5, ag$paths_5h)
h5 <- cbind(h5, ff$paths_5h)
h5_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h5), h5_group)
h6 <- cbind(a1$paths_6h, a2$paths_6h)
h6 <- cbind(h6, a3$paths_6h)
h6 <- cbind(h6, a4$paths_6h)
h6 <- cbind(h6, a5$paths_6h)
h6 <- cbind(h6, af$paths_6h)
h6 <- cbind(h6, ag$paths_6h)
h6 <- cbind(h6, ff$paths_6h)
h6_group <- rep(1:8, c(35, 35, 35, 35, 35, 35, 35, 35))
Steel.Dwass(as.vector(h6), h6_group)
path <- read.csv("normalized_path_for_cmps-full.csv", header = TRUE)
a1 <- path[path$fuzzer=="afl-1.94b",]
a2 <- path[path$fuzzer=="afl-2.40b",]
a3 <- path[path$fuzzer=="afl-2.49b",]
a4 <- path[path$fuzzer=="afl-2.51b",]
a5 <- path[path$fuzzer=="afl-2.52b",]
ff <- path[path$fuzzer=="afl-rb",]
af <- path[path$fuzzer=="aflfast",]
ag <- path[path$fuzzer=="aflgo",]
tmp <- a1
mean(tmp$paths_1)
path <- read.csv("normalized_path_for_cmps-full.csv", header = TRUE)
a1 <- path[path$fuzzer=="afl-1.94b",]
a2 <- path[path$fuzzer=="afl-2.40b",]
a3 <- path[path$fuzzer=="afl-2.49b",]
a4 <- path[path$fuzzer=="afl-2.51b",]
a5 <- path[path$fuzzer=="afl-2.52b",]
ff <- path[path$fuzzer=="afl-rb",]
af <- path[path$fuzzer=="aflfast",]
ag <- path[path$fuzzer=="aflgo",]
tmp <- a1
mean(tmp$paths_1h)
mean(tmp$paths_2h)
mean(tmp$paths_3h)
mean(tmp$paths_4h)
mean(tmp$paths_5h)
mean(tmp$paths_6h)
source('~/.active-rstudio-document')
tmp <- a2
mean(tmp$paths_1h)
mean(tmp$paths_2h)
mean(tmp$paths_3h)
mean(tmp$paths_4h)
mean(tmp$paths_5h)
mean(tmp$paths_6h)
tmp <- a3
mean(tmp$paths_1h)
mean(tmp$paths_2h)
mean(tmp$paths_3h)
mean(tmp$paths_4h)
mean(tmp$paths_5h)
mean(tmp$paths_6h)
tmp <- a4
mean(tmp$paths_1h)
mean(tmp$paths_2h)
mean(tmp$paths_3h)
mean(tmp$paths_4h)
mean(tmp$paths_5h)
mean(tmp$paths_6h)
tmp <- a5
mean(tmp$paths_1h)
mean(tmp$paths_2h)
mean(tmp$paths_3h)
mean(tmp$paths_4h)
mean(tmp$paths_5h)
mean(tmp$paths_6h)
tmp <- af
mean(tmp$paths_1h)
mean(tmp$paths_2h)
mean(tmp$paths_3h)
mean(tmp$paths_4h)
mean(tmp$paths_5h)
mean(tmp$paths_6h)
path <- read.csv("normalized_path_for_cmps-full.csv", header = TRUE)
tmp <- ag
mean(tmp$paths_1h)
mean(tmp$paths_2h)
mean(tmp$paths_3h)
mean(tmp$paths_4h)
mean(tmp$paths_5h)
mean(tmp$paths_6h)
tmp <- ff
mean(tmp$paths_1h)
mean(tmp$paths_2h)
mean(tmp$paths_3h)
mean(tmp$paths_4h)
mean(tmp$paths_5h)
mean(tmp$paths_6h)
